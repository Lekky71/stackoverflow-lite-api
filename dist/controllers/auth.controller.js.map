{"version":3,"sources":["../../controllers/auth.controller.js"],"names":["router","express","Router","client","Client","user","config","postgresql","host","database","password","port","connect","err","console","log","JSON","stringify","query","queries","check_if_table_exists","err1","results","create_user_table","then","result","catch","err2","post","exists","withMessage","trim","isLength","min","isEmail","normalizeEmail","req","res","errors","errorArray","array","forEach","push","msg","isEmpty","json","status","body","username","email","firstName","first_name","lastName","last_name","find_user_by_username","find_user_by_email","result1","bcrypt","hash","create_user","Date","err3","result2","rows","token","jwt","sign","id","secret","find_user_get_password","compare","module","exports"],"mappings":"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","file":"auth.controller.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { Client } from 'pg';\nimport { check, validationResult } from 'express-validator/check';\nimport config from '../config/config';\nimport queries from '../queries/query';\n\n\nconst router = express.Router();\nconst client = new Client({\n  user: config.postgresql.user,\n  host: config.postgresql.host,\n  database: config.postgresql.database,\n  password: config.postgresql.password,\n  port: config.postgresql.port,\n});\n\nclient.connect((err) => {\n  if (err) console.log(`could not connect to Database : ${JSON.stringify(err)}`);\n  else {\n    console.log('Successfully connected to database');\n    client.query(queries.check_if_table_exists, ['hashirAMA'], (err1, results) => {\n      if (err1) {\n        client.query(queries.create_user_table)\n          .then((result) => {\n\n          }).catch((err2) => {\n            console.log(err2);\n          });\n      }\n    });\n  }\n});\nrouter.post('/signup', [\n  check('username').exists().withMessage('Enter username').trim()\n    .isLength({ min: 5 })\n    .withMessage('Minimum length for username is 5'),\n  check('email').isEmail().withMessage('Enter a valid email').trim()\n    .normalizeEmail(),\n  check('password').exists().withMessage('Enter a strong password').isLength({ min: 5 })\n    .withMessage('Minimum length for password is 5'),\n  check('first_name').exists().withMessage('Enter first name').trim()\n    .isLength({ min: 3 })\n    .withMessage('Minimum length for first name is 3'),\n  check('last_name').exists().withMessage('Enter last name').trim()\n    .isLength({ min: 3 })\n    .withMessage('Minimum length for last name is 3'),\n\n], (req, res) => {\n  const errors = validationResult(req);\n  const errorArray = [];\n  errors.array().forEach((err1) => {\n    errorArray.push(err1.msg);\n  });\n\n  if (!errors.isEmpty()) {\n    return res.json({ status: 'failure', errors: errorArray });\n  }\n\n  const { username, email, password } = req.body;\n  const firstName = req.body.first_name;\n  const lastName = req.body.last_name;\n\n  JSON.stringify(client.query(queries.find_user_by_username, [username], (err, result) => {\n    if (result) {\n      return res.status(200).json({ status: 'failure', errors: ['username is taken'] });\n    }\n    JSON.stringify(client.query(queries.find_user_by_email, [email], (err1, result1) => {\n      if (result1) {\n        return res.status(200).json({ status: 'failure', errors: ['email is taken'] });\n      }\n      bcrypt.hash(password, 10, (err2, hash) => {\n        if (err2) return res.status(200).json({ status: 'failure', errors: ['bad password'] });\n        client.query(queries.create_user, [username, hash, email, firstName,\n          lastName, new Date()],\n        (err3, result2) => {\n          if (err3) return res.status(200).json({ status: 'failure', errors: ['could not create account'] });\n          const user = result2.rows[0];\n          const token = jwt.sign({ id: user.id }, config.jwt.secret);\n          return res.status(200).json({\n            status: 'success',\n            user,\n            token,\n          });\n        });\n      });\n    }));\n  }));\n});\n\nrouter.post('/login', [\n  check('username').exists().withMessage('Enter username').trim()\n    .isLength({ min: 5 })\n    .withMessage('Minimum length for username is 5'),\n  check('password').exists().withMessage('Enter password').isLength({ min: 5 })\n    .withMessage('Minimum length for password is 5'),\n], (req, res) => {\n  const errors = validationResult(req);\n  const errorArray = [];\n  errors.array().forEach((err1) => {\n    errorArray.push(err1.msg);\n  });\n\n  if (!errors.isEmpty()) {\n    return res.json({ status: 'failure', errors: errorArray });\n  }\n\n  const { username, password } = req.body;\n  client.query(queries.find_user_get_password, [username], (err, results) => {\n    if(err) console.log(err);\n    console.log(`User logging in : ${results}`);\n    if (results) {\n      const user = results.rows[0];\n      const token = jwt.sign({ id: user.id }, config.jwt.secret);\n      bcrypt.compare(password, user.password, (err2, result) => {\n        if (result) {\n          return res.status(200).json({\n            status: 'success',\n            user,\n            token,\n          });\n        }\n        return res.status(200).json({ status: 'failure', errors: ['Invalid login details'] });\n      });\n    } else {\n      return res.status(200).json({ status: 'failure', errors: ['Invalid login details usaw'] });\n    }\n  });\n});\nmodule.exports = router;\n"]}