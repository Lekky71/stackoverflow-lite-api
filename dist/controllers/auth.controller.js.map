{"version":3,"sources":["../../controllers/auth.controller.js"],"names":["router","express","Router","pool","client","connect","post","exists","withMessage","trim","isLength","min","isEmail","normalizeEmail","req","res","errors","errorArray","array","forEach","err1","push","msg","isEmpty","json","status","username","body","email","password","firstName","first_name","lastName","last_name"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;AACA,IAAMC,OAAO,eAAb;;AAGA,IAAMC,SAAS,iBAAf;AACAA,OAAOC,OAAP;;AAEAL,OAAOM,IAAP,CAAY,SAAZ,EAAuB,CACrB,kBAAM,UAAN,EAAkBC,MAAlB,GAA2BC,WAA3B,CAAuC,gBAAvC,EAAyDC,IAAzD,GACGC,QADH,CACY,EAAEC,KAAK,CAAP,EADZ,EAEGH,WAFH,CAEe,kCAFf,CADqB,EAIrB,kBAAM,OAAN,EAAeI,OAAf,GAAyBJ,WAAzB,CAAqC,qBAArC,EAA4DC,IAA5D,GACGI,cADH,EAJqB,EAMrB,kBAAM,UAAN,EAAkBN,MAAlB,GAA2BC,WAA3B,CAAuC,yBAAvC,EAAkEE,QAAlE,CAA2E,EAAEC,KAAK,CAAP,EAA3E,EACGH,WADH,CACe,kCADf,CANqB,EAQrB,kBAAM,YAAN,EAAoBD,MAApB,GAA6BC,WAA7B,CAAyC,kBAAzC,EAA6DC,IAA7D,GACGC,QADH,CACY,EAAEC,KAAK,CAAP,EADZ,EAEGH,WAFH,CAEe,oCAFf,CARqB,EAWrB,kBAAM,WAAN,EAAmBD,MAAnB,GAA4BC,WAA5B,CAAwC,iBAAxC,EAA2DC,IAA3D,GACGC,QADH,CACY,EAAEC,KAAK,CAAP,EADZ,EAEGH,WAFH,CAEe,mCAFf,CAXqB,CAAvB,EAeG,UAACM,GAAD,EAAMC,GAAN,EAAc;AACf,MAAMC,SAAS,6BAAiBF,GAAjB,CAAf;AACA,MAAMG,aAAa,EAAnB;AACAD,SAAOE,KAAP,GAAeC,OAAf,CAAuB,UAACC,IAAD,EAAU;AAC/BH,eAAWI,IAAX,CAAgBD,KAAKE,GAArB;AACD,GAFD;AAGA,MAAI,CAACN,OAAOO,OAAP,EAAL,EAAuB;AACrB,WAAOR,IAAIS,IAAJ,CAAS,EAAEC,QAAQ,SAAV,EAAqBT,QAAQC,UAA7B,EAAT,CAAP;AACD;AACD,MAAMS,WAAWZ,IAAIa,IAAJ,CAASD,QAA1B;AACA,MAAME,QAAQd,IAAIa,IAAJ,CAASC,KAAvB;AACA,MAAMC,WAAWf,IAAIa,IAAJ,CAASC,KAA1B;AACA,MAAME,YAAYhB,IAAIa,IAAJ,CAASI,UAA3B;AACA,MAAMC,WAAWlB,IAAIa,IAAJ,CAASM,SAA1B;AAGD,CA/BD","file":"auth.controller.js","sourcesContent":["import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { Pool, Client } from 'pg';\n\nimport { check, validationResult } from 'express-validator/check';\n\nconst router = express.Router();\nconst pool = Pool();\n\n\nconst client = Client();\nclient.connect();\n\nrouter.post('/signup', [\n  check('username').exists().withMessage('Enter username').trim()\n    .isLength({ min: 5 })\n    .withMessage('Minimum length for username is 5'),\n  check('email').isEmail().withMessage('Enter a valid email').trim()\n    .normalizeEmail(),\n  check('password').exists().withMessage('Enter a strong password').isLength({ min: 5 })\n    .withMessage('Minimum length for password is 5'),\n  check('first_name').exists().withMessage('Enter first name').trim()\n    .isLength({ min: 3 })\n    .withMessage('Minimum length for first name is 3'),\n  check('last_name').exists().withMessage('Enter last name').trim()\n    .isLength({ min: 3 })\n    .withMessage('Minimum length for last name is 3'),\n\n], (req, res) => {\n  const errors = validationResult(req);\n  const errorArray = [];\n  errors.array().forEach((err1) => {\n    errorArray.push(err1.msg);\n  });\n  if (!errors.isEmpty()) {\n    return res.json({ status: 'failure', errors: errorArray });\n  }\n  const username = req.body.username;\n  const email = req.body.email;\n  const password = req.body.email;\n  const firstName = req.body.first_name;\n  const lastName = req.body.last_name;\n\n\n});\n"]}